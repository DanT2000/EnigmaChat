#!/bin/bash

APP_DIR="/opt/EnigmaChat"
VENV_DIR="$APP_DIR/venv"
SERVICE_FILE="/etc/systemd/system/EnigmaChat.service"
DEFAULT_PORT=9125

function prompt_for_port() {
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è EnigmaChat (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $DEFAULT_PORT): " PORT
    PORT=${PORT:-$DEFAULT_PORT}
}

function install() {
    echo "üîß –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ EnigmaChat..."

    prompt_for_port

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    sudo apt update
    sudo apt install -y python3 python3-venv python3-pip curl iptables-persistent

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sudo mkdir -p "$APP_DIR"
    sudo chown $USER:$USER "$APP_DIR"

    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ server.py
    if [ ! -f "$APP_DIR/server.py" ]; then
        cat > "$APP_DIR/server.py" <<EOF
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse
import asyncio
import os
import json
import datetime

app = FastAPI()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
# –§–æ—Ä–º–∞—Ç: chats[chat_name] = {"password": str –∏–ª–∏ None, "messages": list, "connections": list, "last_active": datetime}
chats = {}

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("data", exist_ok=True)

@app.websocket("/ws/{chat_name}")
async def websocket_chat(websocket: WebSocket, chat_name: str):
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
    await websocket.accept()
    chat = None
    authenticated = True  # –§–ª–∞–≥, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–π –ø—Ä–æ–π–¥–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–∞
    file_path = f"data/{chat_name}.json"
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ
    if chat_name in chats:
        chat = chats[chat_name]
        if chat["password"] is not None:
            # –ß–∞—Ç —Å –ø–∞—Ä–æ–ª–µ–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            authenticated = False
        else:
            authenticated = True
            # –ï—Å–ª–∏ —É —á–∞—Ç–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è –∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–∏–≤—à–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—á–∞—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è)
            if len(chat["connections"]) > 0:
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–∫–∞ —á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                await websocket.close()
                return
    else:
        if os.path.exists(file_path):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç —Å –¥–∏—Å–∫–∞
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except json.JSONDecodeError:
                data = {"name": chat_name, "password": None, "messages": []}
            chats[chat_name] = {
                "password": data.get("password"),
                "messages": data.get("messages", []),
                "connections": [],
                "last_active": None
            }
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_active –ø–æ –æ—Ç–º–µ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if chats[chat_name]["messages"]:
                last_ts = chats[chat_name]["messages"][-1].get("timestamp")
                try:
                    last_dt = datetime.datetime.fromisoformat(last_ts) if last_ts else datetime.datetime.utcnow()
                except Exception:
                    last_dt = datetime.datetime.utcnow()
                chats[chat_name]["last_active"] = last_dt
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –±–µ—Ä—ë–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞)
                try:
                    mtime = os.path.getmtime(file_path)
                    chats[chat_name]["last_active"] = datetime.datetime.fromtimestamp(mtime)
                except:
                    chats[chat_name]["last_active"] = datetime.datetime.utcnow()
            chat = chats[chat_name]
            if chat["password"] is not None:
                authenticated = False
            else:
                authenticated = True
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏, —Ñ–∞–π–ª —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è)
            chats[chat_name] = {
                "password": None,
                "messages": [],
                "connections": [],
                "last_active": datetime.datetime.utcnow()
            }
            chat = chats[chat_name]
            authenticated = True
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    chat["connections"].append(websocket)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    if chat["password"] is None:
        # –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω
        await websocket.send_json({
            "type": "info",
            "message": "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–≤–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –≤—Ö–æ–¥–∞."
        })
    elif not authenticated:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        await websocket.send_json({"type": "auth_required"})
    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    try:
        while True:
            data = await websocket.receive_text()
            # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (JSON)
            try:
                msg = json.loads(data)
            except json.JSONDecodeError:
                msg = {"text": data}
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if not authenticated:
                # –û–∂–∏–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–∞—Ä–æ–ª—è
                attempted_pass = msg.get("text", "")
                if attempted_pass == chat["password"]:
                    # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
                    authenticated = True
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - —Ç–æ–∂–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
                    chat["last_active"] = datetime.datetime.utcnow()
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
                    if chat["messages"]:
                        for old_msg in chat["messages"]:
                            await websocket.send_json(old_msg)
                    else:
                        await websocket.send_json({
                            "type": "info",
                            "message": "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç."
                        })
                    continue
                else:
                    # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    await websocket.close()
                    break
            else:
                # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                name = msg.get("name", "")
                if not name:
                    name = "–ê–Ω–æ–Ω–∏–º"
                text = msg.get("text", "")
                iv = msg.get("iv", None)
                if chat["password"] is None:
                    # –ï—Å–ª–∏ —É —á–∞—Ç–∞ –µ—â—ë –Ω–µ—Ç –ø–∞—Ä–æ–ª—è, —Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å
                    chat["password"] = text
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    chat["last_active"] = datetime.datetime.utcnow()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç –≤ —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
                    chat_data = {
                        "name": chat_name,
                        "password": chat["password"],
                        "messages": []
                    }
                    with open(file_path, "w", encoding="utf-8") as f:
                        json.dump(chat_data, f, ensure_ascii=False)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    await websocket.send_json({
                        "type": "info",
                        "message": f"–ü–∞—Ä–æ–ª—å –¥–ª—è —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat['password']}"
                    })
                    continue
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = datetime.datetime.utcnow().isoformat()
                message_entry = {"name": name, "text": text, "timestamp": timestamp}
                if iv:
                    message_entry["iv"] = iv
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                chat["messages"].append(message_entry)
                chat["last_active"] = datetime.datetime.utcnow()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —á–∞—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
                chat_data = {
                    "name": chat_name,
                    "password": chat["password"],
                    "messages": chat["messages"]
                }
                with open(file_path, "w", encoding="utf-8") as f:
                    json.dump(chat_data, f, ensure_ascii=False)
                # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º —á–∞—Ç–∞
                for conn in chat["connections"]:
                    await conn.send_json(message_entry)
    except WebSocketDisconnect:
        # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
        chat["connections"].remove(websocket)
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å—Ä–∞–∑—É (–æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏)
        return

@app.post("/delete/{chat_name}")
async def delete_chat(chat_name: str):
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—Ä—É—á–Ω—É—é
    if chat_name in chats:
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ
        for conn in list(chats[chat_name]["connections"]):
            await conn.close()
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –ø–∞–º—è—Ç–∏
        chats.pop(chat_name, None)
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–∞—Ç–∞ —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    file_path = f"data/{chat_name}.json"
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    return {"detail": "–ß–∞—Ç —É–¥–∞–ª—ë–Ω"}

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
async def cleanup_chats():
    while True:
        await asyncio.sleep(60)
        now = datetime.datetime.utcnow()
        to_delete = []
        for name, chat in list(chats.items()):
            if chat["last_active"] is None:
                continue
            elapsed = (now - chat["last_active"]).total_seconds()
            if elapsed > 30 * 60 and len(chat["connections"]) == 0:
                to_delete.append(name)
        for name in to_delete:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–æ—Å—å)
            if name in chats:
                for conn in list(chats[name]["connections"]):
                    try:
                        await conn.close()
                    except:
                        pass
                chats.pop(name, None)
            file_path = f"data/{name}.json"
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass

@app.on_event("startup")
async def on_startup():
    os.makedirs("data", exist_ok=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    asyncio.create_task(cleanup_chats())

# –û—Ç–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
@app.get("/", response_class=HTMLResponse)
async def index():
    try:
        with open("index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(f.read(), status_code=200)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="index.html not found")

EOF
        echo "üìÑ –§–∞–π–ª server.py —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —à–∞–±–ª–æ–Ω."
    else
        echo "‚úÖ –§–∞–π–ª server.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ."
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ index.html
    if [ ! -f "$APP_DIR/index.html" ]; then
        cat > "$APP_DIR/index.html" <<EOF
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç</title>
    <style>
        body {
            background: #1e1e1e;
            color: #ddd;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        #join-screen {
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        #join-screen input {
            width: 200px;
            padding: 8px;
            margin: 5px;
            border: none;
            border-radius: 4px;
        }
        #join-screen button {
            padding: 8px 16px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background: #3a3a3a;
            color: #fff;
            cursor: pointer;
            font-size: 1em;
        }
        #join-screen button:hover {
            background: #4a4a4a;
        }
        #chat-screen {
            display: none;
            height: 100vh;
            max-height: 100vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        #chat-header {
            position: relative;
            padding: 10px;
            background: #2a2a2a;
        }
        #chat-header h2 {
            margin: 0;
            font-size: 1.2em;
        }
        #chat-controls {
            position: absolute;
            top: 10px;
            right: 10px;
        }
        #chat-controls button {
            background: none;
            border: none;
            color: #ddd;
            font-size: 1.2em;
            cursor: pointer;
            margin-left: 5px;
        }
        #chat-controls button:hover {
            color: #fff;
        }
        #messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        .message {
            max-width: 70%;
            padding: 6px 10px;
            margin: 5px 0;
            border-radius: 5px;
            word-wrap: break-word;
        }
        .message.self {
            align-self: flex-end;
            background: #4e4e4e;
        }
        .message.other {
            align-self: flex-start;
            background: #3a3a3a;
        }
        .message .name {
            font-weight: bold;
            margin-right: 5px;
        }
        .info-message {
            text-align: center;
            color: #999;
            font-style: italic;
            margin: 5px 0;
        }
        #messageForm {
            display: flex;
            padding: 10px;
            background: #2a2a2a;
        }
        #messageInput {
            flex: 1;
            padding: 8px;
            border: none;
            border-radius: 4px;
            margin-right: 5px;
        }
        #messageForm button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            background: #3a3a3a;
            color: #fff;
            cursor: pointer;
        }
        #messageForm button:hover {
            background: #4a4a4a;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background: #2e2e2e;
            padding: 20px;
            border-radius: 5px;
            text-align: center;
            color: #fff;
            width: 80%;
            max-width: 300px;
        }
        .modal-content input {
            width: 80%;
            padding: 8px;
            margin: 10px 0;
            border: none;
            border-radius: 4px;
        }
        .modal-content button {
            padding: 6px 12px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background: #4a4a4a;
            color: #fff;
            cursor: pointer;
        }
        .modal-content button:hover {
            background: #5a5a5a;
        }
        .error {
            color: #ff5555;
        }
    </style>
</head>
<body>
    <div id="join-screen">
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
        <input type="text" id="chatNameInput" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞" />
        <div id="passwordDiv" style="display:none;">
            <input type="password" id="passwordInput" placeholder="–ü–∞—Ä–æ–ª—å" />
        </div>
        <button id="connectBtn">–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button>
        <p id="errorMsg" class="error"></p>
    </div>
    <div id="chat-screen">
        <div id="chat-header">
            <h2 id="chatTitle"></h2>
            <div id="chat-controls">
                <button id="encBtn" title="–í–≤–µ—Å—Ç–∏ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è">üîê</button>
                <button id="nameBtn" title="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">üßë‚Äçüíª</button>
                <button id="delBtn" title="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç">üóë</button>
            </div>
        </div>
        <div id="messages"></div>
        <form id="messageForm">
            <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." autocomplete="off" />
            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </form>
    </div>
    <!-- Modal –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è -->
    <div id="modal-key" class="modal">
        <div class="modal-content">
            <h3>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</h3>
            <input type="text" id="keyInput" placeholder="–ö–ª—é—á" />
            <br/>
            <button id="keyConfirmBtn">OK</button>
            <button id="keyCancelBtn">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    <!-- Modal –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ -->
    <div id="modal-name" class="modal">
        <div class="modal-content">
            <h3>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
            <input type="text" id="nameInputModal" placeholder="–í–∞—à–µ –∏–º—è" />
            <br/>
            <button id="nameConfirmBtn">OK</button>
            <button id="nameCancelBtn">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let ws;
        let chatName = "";
        let userName = "";
        let encryptionKey = null;
        let connected = false;
        let waitingForAuth = false;
        const messages = [];

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        const joinScreen = document.getElementById('join-screen');
        const chatScreen = document.getElementById('chat-screen');
        const chatTitle = document.getElementById('chatTitle');
        const chatNameInput = document.getElementById('chatNameInput');
        const passwordDiv = document.getElementById('passwordDiv');
        const passwordInput = document.getElementById('passwordInput');
        const connectBtn = document.getElementById('connectBtn');
        const errorMsg = document.getElementById('errorMsg');
        const messagesDiv = document.getElementById('messages');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const encBtn = document.getElementById('encBtn');
        const nameBtn = document.getElementById('nameBtn');
        const delBtn = document.getElementById('delBtn');
        const modalKey = document.getElementById('modal-key');
        const keyInput = document.getElementById('keyInput');
        const keyConfirmBtn = document.getElementById('keyConfirmBtn');
        const keyCancelBtn = document.getElementById('keyCancelBtn');
        const modalName = document.getElementById('modal-name');
        const nameInputModal = document.getElementById('nameInputModal');
        const nameConfirmBtn = document.getElementById('nameConfirmBtn');
        const nameCancelBtn = document.getElementById('nameCancelBtn');

        // –£—Ç–∏–ª–∏—Ç—ã: —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 (ArrayBuffer <-> Base64)
        function arrayBufferToBase64(buffer) {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < bytes.length; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return btoa(binary);
        }
        function base64ToArrayBuffer(base64) {
            const binary = atob(base64);
            const bytes = new Uint8Array(binary.length);
            for (let i = 0; i < binary.length; i++) {
                bytes[i] = binary.charCodeAt(i);
            }
            return bytes.buffer;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ –≤ –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        function addMessageToDisplay(msg) {
            if (msg.type === 'info') {
                // –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const infoElem = document.createElement('div');
                infoElem.className = 'info-message';
                infoElem.textContent = msg.message;
                messagesDiv.appendChild(infoElem);
            } else {
                // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
                const nameToShow = msg.name ? msg.name : '–ê–Ω–æ–Ω–∏–º';
                const messageElem = document.createElement('div');
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                let alignClass = 'other';
                if (userName && msg.name === userName) {
                    alignClass = 'self';
                } 
                // –ï—Å–ª–∏ userName –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∞–Ω–æ–Ω–∏–º), –≤—Å–µ "–ê–Ω–æ–Ω–∏–º" –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ —á—É–∂–∏–µ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                messageElem.className = 'message ' + alignClass;
                if (alignClass === 'other') {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    const nameSpan = document.createElement('span');
                    nameSpan.className = 'name';
                    nameSpan.textContent = nameToShow + ': ';
                    messageElem.appendChild(nameSpan);
                }
                const textSpan = document.createElement('span');
                textSpan.className = 'text';
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (msg.iv) {
                    const cipherText = msg.text;
                    textSpan.textContent = cipherText;
                    if (encryptionKey) {
                        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞
                        const ivBuffer = base64ToArrayBuffer(msg.iv);
                        const cipherBuffer = base64ToArrayBuffer(cipherText);
                        crypto.subtle.decrypt({name: "AES-GCM", iv: ivBuffer}, encryptionKey, cipherBuffer)
                            .then(decryptedBuffer => {
                                const decoder = new TextDecoder();
                                const plainText = decoder.decode(decryptedBuffer);
                                textSpan.textContent = plainText;
                            })
                            .catch(err => {
                                // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á), –æ—Å—Ç–∞–≤–ª—è–µ–º —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç
                                console.error("Decryption error:", err);
                                textSpan.textContent = cipherText;
                            });
                    }
                } else {
                    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    textSpan.textContent = msg.text;
                }
                messageElem.appendChild(textSpan);
                messagesDiv.appendChild(messageElem);
            }
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∏–∑ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —á–∞—Ç–∞, —Å–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        function enterChat() {
            joinScreen.style.display = 'none';
            chatScreen.style.display = 'flex';
            chatTitle.textContent = '–ß–∞—Ç: ' + chatName;
            messageInput.focus();
        }

        // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞)
        function resetUI() {
            if (ws) {
                ws.close();
            }
            connected = false;
            waitingForAuth = false;
            messages.length = 0;
            messagesDiv.innerHTML = '';
            encryptionKey = null;
            userName = '';
            // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞, —Å–∫—Ä—ã—Ç—å —á–∞—Ç
            chatScreen.style.display = 'none';
            joinScreen.style.display = 'flex';
            passwordDiv.style.display = 'none';
            chatNameInput.value = '';
            passwordInput.value = '';
            connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
            errorMsg.textContent = '';
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
        connectBtn.addEventListener('click', function() {
            if (!waitingForAuth) {
                // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
                chatName = chatNameInput.value.trim();
                if (!chatName) {
                    errorMsg.textContent = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞';
                    return;
                }
                errorMsg.textContent = '';
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
                const loc = window.location;
                const wsProtocol = loc.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = wsProtocol + '//' + loc.host + '/ws/' + encodeURIComponent(chatName);
                ws = new WebSocket(wsUrl);
                ws.onopen = function() {
                    // —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                };
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    if (data.type === 'auth_required') {
                        // –ß–∞—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º ‚Äì —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥
                        waitingForAuth = true;
                        passwordDiv.style.display = 'block';
                        passwordInput.focus();
                        connectBtn.textContent = '–í–æ–π—Ç–∏';
                    } else if (data.type === 'info') {
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                        if (!connected) {
                            // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —á–∞—Ç, –¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å
                            connected = true;
                            enterChat();
                        }
                        messages.push(data);
                        addMessageToDisplay(data);
                    } else {
                        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –Ω–æ–≤–æ–µ)
                        if (!connected) {
                            connected = true;
                            enterChat();
                        }
                        messages.push(data);
                        addMessageToDisplay(data);
                    }
                };
                ws.onclose = function(event) {
                    if (waitingForAuth && !connected) {
                        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è -> –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
                        errorMsg.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
                        connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
                        waitingForAuth = false;
                        // –û—Å—Ç–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (–ø–æ–ª–µ –ø–∞—Ä–æ–ª—è —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)
                    } else if (connected) {
                        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã—Ç–æ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —á–∞—Ç —É–¥–∞–ª—ë–Ω)
                        alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –í–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω.');
                        resetUI();
                    }
                };
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                const pass = passwordInput.value;
                if (!pass) {
                    errorMsg.textContent = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
                    return;
                }
                errorMsg.textContent = '';
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ text: pass }));
                }
                // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–¥—ë–º onmessage –∏–ª–∏ onclose (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            }
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        messageForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const text = messageInput.value;
            if (!text) return;
            if (!ws || ws.readyState !== WebSocket.OPEN) return;
            const messageToSend = { name: userName, text: text };
            if (encryptionKey) {
                // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AES-GCM
                const iv = window.crypto.getRandomValues(new Uint8Array(12));
                const encoder = new TextEncoder();
                const textBuffer = encoder.encode(text);
                crypto.subtle.encrypt({name: "AES-GCM", iv: iv}, encryptionKey, textBuffer)
                    .then(encryptedBuffer => {
                        const cipherText = arrayBufferToBase64(encryptedBuffer);
                        const ivBase64 = arrayBufferToBase64(iv.buffer);
                        const sendData = { name: userName, text: cipherText, iv: ivBase64 };
                        ws.send(JSON.stringify(sendData));
                    })
                    .catch(err => {
                        console.error("Encryption error:", err);
                        // –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        ws.send(JSON.stringify(messageToSend));
                    });
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                ws.send(JSON.stringify(messageToSend));
            }
            messageInput.value = '';
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∏–∫–æ–Ω–∫–∞ üîê)
        encBtn.addEventListener('click', function() {
            keyInput.value = '';
            modalKey.style.display = 'flex';
            keyInput.focus();
        });
        keyCancelBtn.addEventListener('click', function() {
            modalKey.style.display = 'none';
        });
        keyConfirmBtn.addEventListener('click', function() {
            const passphrase = keyInput.value;
            modalKey.style.display = 'none';
            if (passphrase === '') {
                // –û—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á (–æ—Ç–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ)
                encryptionKey = null;
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–µ—Ä–Ω—É–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                messagesDiv.innerHTML = '';
                for (const msg of messages) {
                    addMessageToDisplay(msg);
                }
                return;
            }
            // –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –∫–ª—é—á–∞ AES-GCM –∏–∑ –ø–∞—Ä–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã (PBKDF2)
            const enc = new TextEncoder();
            const salt = enc.encode(chatName); // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —á–∞—Ç–∞ –∫–∞–∫ —Å–æ–ª—å
            window.crypto.subtle.importKey(
                'raw', enc.encode(passphrase), { name: 'PBKDF2' }, false, ['deriveKey']
            ).then(keyMaterial => {
                return window.crypto.subtle.deriveKey(
                    { name: 'PBKDF2', salt: salt, iterations: 100000, hash: 'SHA-256' },
                    keyMaterial,
                    { name: 'AES-GCM', length: 256 },
                    false,
                    ['encrypt', 'decrypt']
                );
            }).then(derivedKey => {
                encryptionKey = derivedKey;
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
                messagesDiv.innerHTML = '';
                for (const msg of messages) {
                    addMessageToDisplay(msg);
                }
            }).catch(err => {
                console.error("Key derivation error:", err);
                encryptionKey = null;
            });
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–∏–∫–æ–Ω–∫–∞ üßë‚Äçüíª)
        nameBtn.addEventListener('click', function() {
            nameInputModal.value = '';
            modalName.style.display = 'flex';
            nameInputModal.focus();
        });
        nameCancelBtn.addEventListener('click', function() {
            modalName.style.display = 'none';
        });
        nameConfirmBtn.addEventListener('click', function() {
            const newName = nameInputModal.value.trim();
            modalName.style.display = 'none';
            if (newName === "") {
                userName = "";
            } else {
                userName = newName;
            }
            // –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
            const infoMsg = { type: 'info', message: (userName ? '–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ: ' + userName : '–ò–º—è —Å–±—Ä–æ—à–µ–Ω–æ (–∞–Ω–æ–Ω–∏–º)') };
            messages.push(infoMsg);
            addMessageToDisplay(infoMsg);
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ (–∏–∫–æ–Ω–∫–∞ üóë)
        delBtn.addEventListener('click', function() {
            if (!chatName) return;
            if (confirm("–£–¥–∞–ª–∏—Ç—å —á–∞—Ç \"" + chatName + "\"?")) {
                fetch("/delete/" + encodeURIComponent(chatName), { method: 'POST' })
                    .catch(err => console.error("Delete request error:", err));
                // –°–µ—Ä–≤–µ—Ä —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç —á–∞—Ç, –≤—ã–∑–≤–∞–≤ onclose
            }
        });
    </script>
</body>
</html>

EOF
        echo "üìÑ –§–∞–π–ª index.html —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —à–∞–±–ª–æ–Ω."
    else
        echo "‚úÖ –§–∞–π–ª index.html —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ."
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"
    pip install --upgrade pip
    pip install fastapi uvicorn
    deactivate

    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
    echo "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ EnigmaChat..."
    sudo bash -c "cat > $SERVICE_FILE" <<EOF
[Unit]
Description=EnigmaChat Service
After=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/uvicorn server:app --host 0.0.0.0 --port $PORT
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    sudo systemctl daemon-reload
    sudo systemctl enable EnigmaChat.service
    sudo systemctl restart EnigmaChat.service

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    echo "üõ° –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ $PORT –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ..."
    sudo iptables -I INPUT -p tcp --dport $PORT -j ACCEPT
    sudo netfilter-persistent save

    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. EnigmaChat —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $PORT."
    echo "üëâ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://<IP-–∞–¥—Ä–µ—Å>:$PORT"
    echo "‚úçÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–¥ –≤ —Ñ–∞–π–ª—ã:"
    echo "    $APP_DIR/server.py"
    echo "    $APP_DIR/index.html"
}

function remove() {
    echo "‚ùå –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ EnigmaChat..."

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    sudo systemctl stop EnigmaChat.service
    sudo systemctl disable EnigmaChat.service
    sudo rm -f "$SERVICE_FILE"
    sudo systemctl daemon-reload

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sudo rm -rf "$APP_DIR"

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ
    echo "üõ° –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ..."
    sudo iptables -D INPUT -p tcp --dport $PORT -j ACCEPT 2>/dev/null
    sudo netfilter-persistent save

    echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
clear
echo "==============================="
echo "     –£–°–¢–ê–ù–û–í–ö–ê EnigmaChat      "
echo "==============================="
echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
echo "2. –£–¥–∞–ª–∏—Ç—å"
echo "0. –í—ã–π—Ç–∏"
read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: " choice

case $choice in
    1) install ;;
    2) remove ;;
    0) exit 0 ;;
    *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 0." ;;
esac
